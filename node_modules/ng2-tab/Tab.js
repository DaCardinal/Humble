"use strict";
var core_1 = require("@angular/core");
var TabGroup_1 = require("./TabGroup");
var TabToggle_1 = require("./TabToggle");
var Tab = (function () {
    function Tab(tabGroup, cdr) {
        this.tabGroup = tabGroup;
        this.cdr = cdr;
        this.isOpened = false;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onToggle = new core_1.EventEmitter();
        this.disabled = false;
        this.etabs_tab_classList = "etabs-tab visible";
    }
    Tab.prototype.checkAndToggle = function () {
        // if custom toggle element is supplied, then do nothing, custom toggler will take care of it
        if (this.toggler)
            return;
        this.toggle();
        console.log("toggled:", this);
    };
    Tab.prototype.toggle = function () {
        if (this.disabled)
            return;
        var isOpenedBeforeWeChange = this.isOpened;
        if (this.tabGroup.closeOthers)
            this.tabGroup.closeAll();
        this.isOpened = !isOpenedBeforeWeChange;
        if (this.isOpened) {
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
        this.onToggle.emit(this.isOpened);
    };
    Tab.prototype.openOnInitialization = function () {
        this.isOpened = true;
        this.cdr.detectChanges();
    };
    Tab.decorators = [
        { type: core_1.Component, args: [{
                    selector: "etabs-tab",
                    template: "<div (click)=\"checkAndToggle()\"><span class=\"etabs-tab-icon\"></span><span class=\"etabs-tab-title\">{{ heading }}</span><span class=\"etabs-tab-buttons\"><button class=\"etabs-tab-button-close\">âœ–</button></span></div>\n",
                    host: {'[class]': 'etabs_tab_classList'}
                },] },
    ];
    /** @nocollapse */
    Tab.ctorParameters = function () { return [
        { type: TabGroup_1.TabGroup, decorators: [{ type: core_1.Host }, { type: core_1.Inject, args: [core_1.forwardRef(function () { return TabGroup_1.TabGroup; }),] },] },
        { type: core_1.ChangeDetectorRef, },
    ]; };
    Tab.propDecorators = {
        'heading': [{ type: core_1.Input },],
        'isOpened': [{ type: core_1.Input },],
        'onOpen': [{ type: core_1.Output },],
        'onClose': [{ type: core_1.Output },],
        'onToggle': [{ type: core_1.Output },],
        'toggler': [{ type: core_1.ContentChild, args: [TabToggle_1.TabToggle,] },],
        'disabled': [{ type: core_1.Input },],
    };
    return Tab;
}());
exports.Tab = Tab;